{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/aria/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/atom-one-light.css","path":"css/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/commentjs.css","path":"css/commentjs.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/footer.styl","path":"css/footer.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/header.styl","path":"css/header.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/info.styl","path":"css/info.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/lightgallery.min.css","path":"css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/nav.styl","path":"css/nav.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/reward.styl","path":"css/reward.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/sidebar.styl","path":"css/sidebar.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-dark.css","path":"css/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-light.css","path":"css/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.eot","path":"fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/aria/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/aria/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/aria/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/commentjs.js","path":"js/commentjs.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/fontawesome-all.min.js","path":"js/fontawesome-all.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","path":"js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-hash.min.js","path":"js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-pager.min.js","path":"js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","path":"js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-zoom.min.js","path":"js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lightgallery.min.js","path":"js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/marked.min.js","path":"js/marked.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/timeago.min.js","path":"js/timeago.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/util.js","path":"js/util.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Hello.md","hash":"7e8161b140c63a4c55550234c47855d330e77b5e","modified":1612193074376},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1612107559992},{"_id":"source/about/index.md","hash":"de33e15fb5814bb861d728ab956e858d82cd0090","modified":1612108131142},{"_id":"source/tags/index.md","hash":"86a6af23ac51769caa651e1b61006919fd4660c4","modified":1612108136315},{"_id":"source/makefile/index.md","hash":"c90bb5417e27f8acc46b231a54bfbb1641989242","modified":1612195238925},{"_id":"themes/aria/.gitignore","hash":"c834fafd18364f84ecdb85f8e7116e0587f38097","modified":1612106028005},{"_id":"themes/aria/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1612106028008},{"_id":"themes/aria/_config.yml","hash":"4c6ed8364f004f90beb032730ebfd79e9c2d9e6b","modified":1612192741104},{"_id":"themes/aria/_config.yml.example","hash":"8adb7a71f8f706ddbc4866b6daf120f4f3f1de42","modified":1612106028008},{"_id":"themes/aria/package.json","hash":"204daa5c8bcb223c75d48f8fe03ae0cf64c09d6e","modified":1612106028008},{"_id":"themes/aria/.github/CODE_OF_CONDUCT.md","hash":"9d4763e6ab7a83a95ac7b71d9231b054613ee80a","modified":1612106028005},{"_id":"themes/aria/.github/CONTRIBUTING.md","hash":"79440006745ae233729ceccae96fcc9b654f3100","modified":1612106028005},{"_id":"themes/aria/.github/ISSUE_TEMPLATE.md","hash":"7043b0a86411108976120fb19e45d8c141cd4b00","modified":1612106028005},{"_id":"themes/aria/.github/PULL_REQUEST_TEMPLATE.md","hash":"6b606f25f81eac248bdacb64cd6a767856e1629f","modified":1612106028005},{"_id":"themes/aria/languages/default.yml","hash":"4c9276c495c0e83942599d8b3eef358c2f01c719","modified":1612106028008},{"_id":"themes/aria/languages/en.yml","hash":"4c9276c495c0e83942599d8b3eef358c2f01c719","modified":1612106028008},{"_id":"themes/aria/languages/zh_CN.yml","hash":"3b54b6c97901b050dbeb9196810af2306cd5dcc9","modified":1612106028008},{"_id":"themes/aria/languages/zh_HK.yml","hash":"3ef62cac353a5ffc390897720215525380521738","modified":1612106028008},{"_id":"themes/aria/languages/zh_TW.yml","hash":"3ef62cac353a5ffc390897720215525380521738","modified":1612106028008},{"_id":"themes/aria/README.zh_CN.md","hash":"81d56793468f0a865466a8608cc0b163e8e50038","modified":1612106028008},{"_id":"themes/aria/layout/.header.njk.kate-swp","hash":"455009eba9f44320110c652a1188cdb6aa02ed15","modified":1612190702297},{"_id":"themes/aria/README.md","hash":"8b1022cfb84b0d5b4ea35c1804cd4960786253e4","modified":1612106028008},{"_id":"themes/aria/layout/archive.njk","hash":"00969950276c7f2ec5e44f0e2348d2ce075999b6","modified":1612106028008},{"_id":"themes/aria/layout/categories.njk","hash":"2b25faba94c55a036a10e6bc68cf9633cbe5713d","modified":1612106028008},{"_id":"themes/aria/layout/category.njk","hash":"44471c4909635c31f2dcddaafe052b1c65d7ae7c","modified":1612106028008},{"_id":"themes/aria/layout/footer.njk","hash":"5bdc8d7a407ac721d0869302cec6e4a7ceefce12","modified":1612106028008},{"_id":"themes/aria/layout/header.njk","hash":"f42426b3bff2967e90977666b6b167f5151dbb0d","modified":1612190700177},{"_id":"themes/aria/layout/_layout.njk","hash":"79f050626701f8dfaff0442f2328a5360a5d9064","modified":1612106028008},{"_id":"themes/aria/layout/comment.njk","hash":"d49bf954b953d75fe510e9e39615836c6fe05579","modified":1612106028008},{"_id":"themes/aria/layout/info.njk","hash":"e540fd8e31569cf776a129f6fd4a40ef4db2ea1a","modified":1612106028008},{"_id":"themes/aria/layout/page.njk","hash":"adcfd3830e6433f8613d22f879fc194d6ef973b9","modified":1612106028008},{"_id":"themes/aria/layout/index.njk","hash":"94ff769d7e3abcfccc423fee3bcb35b77c1ff801","modified":1612106028008},{"_id":"themes/aria/layout/reward.njk","hash":"47081449f1f55f84b89765c0a859e562d7a9602a","modified":1612106028008},{"_id":"themes/aria/layout/sidebar.njk","hash":"68f05c56f426e86300c3420e4be9536ac43fcc3c","modified":1612106028008},{"_id":"themes/aria/layout/tag.njk","hash":"970aa4e001b617e95734a676b6d55bbf9842cb55","modified":1612106028008},{"_id":"themes/aria/layout/post.njk","hash":"45b6a4115ce64fc49e3b4f0bc71dad9bf0e2fa67","modified":1612106028008},{"_id":"themes/aria/layout/tags.njk","hash":"b2a9278ddd5d41ddd01b589e662065b1ac351ae4","modified":1612106028008},{"_id":"themes/aria/scripts/regexp-tags.js","hash":"203cbd4e867888ac365580c6bf6f88719926916c","modified":1612106028012},{"_id":"themes/aria/source/css/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1612106028012},{"_id":"themes/aria/source/css/comment.styl","hash":"9820017c06ddcb86fac84d3fd4823d60316dbd4e","modified":1612106028012},{"_id":"themes/aria/source/css/atom-one-light.css","hash":"13e7620fe2842fa91cb309391a0b01a0c8712f12","modified":1612106028012},{"_id":"themes/aria/source/css/custom.styl","hash":"957c0ec7bbbd66daac71d5ecbf4407ba598e8b2f","modified":1612106028012},{"_id":"themes/aria/source/css/commentjs.css","hash":"d00731f87a5946fe70c893ba52ccc2b29c1f7ae6","modified":1612106028012},{"_id":"themes/aria/source/css/footer.styl","hash":"67c846abd8b220a9586399a0a8e773bce2cfb515","modified":1612106028012},{"_id":"themes/aria/source/css/main.styl","hash":"871b1f4a96f009dffd0c37f143b702d7432678df","modified":1612106028012},{"_id":"themes/aria/source/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1612106028012},{"_id":"themes/aria/source/css/nav.styl","hash":"28ecd2976d4a2051e8c5d0e7c0054180e560f7c5","modified":1612106028012},{"_id":"themes/aria/source/css/index.styl","hash":"eda66df68494d24fb0cfcc433df1c528c5e86f7a","modified":1612106028012},{"_id":"themes/aria/source/css/normalize.css","hash":"734a72e6c28d4a3a870404fb4abf72723c754296","modified":1612106028012},{"_id":"themes/aria/source/css/page.styl","hash":"68866f596c9ee6dac1c28b4d67bfab2cc8c9c306","modified":1612106028012},{"_id":"themes/aria/source/css/info.styl","hash":"8c500a1d2f1897d8f8319119cb1572f7ba8acca6","modified":1612106028012},{"_id":"themes/aria/source/css/post.styl","hash":"93df40f83d77ba50e792513443f584b16a8c0eb0","modified":1612106028012},{"_id":"themes/aria/source/css/reward.styl","hash":"d6d79ff8ed2a5e920f7812328035fccfbdffa3a7","modified":1612106028012},{"_id":"themes/aria/source/css/sidebar.styl","hash":"990d3513b566f7a66513c1c5c8c2b020ac1691a9","modified":1612190222465},{"_id":"themes/aria/source/css/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1612106028012},{"_id":"themes/aria/source/css/header.styl","hash":"9d467bb58fc2390c93ce9f5b4f95c6995bc0764e","modified":1612106028012},{"_id":"themes/aria/source/css/variables.styl","hash":"2e1fd80981ca443ca0bc5c6747fddd006e5b9228","modified":1612192927332},{"_id":"themes/aria/source/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1612106028012},{"_id":"themes/aria/source/css/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1612106028012},{"_id":"themes/aria/source/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1612106028012},{"_id":"themes/aria/source/fonts/lg.svg","hash":"50a2216596766a48655e3f87e1d1000ba93bf8a1","modified":1612106028012},{"_id":"themes/aria/source/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1612106028012},{"_id":"themes/aria/source/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1612106028012},{"_id":"themes/aria/source/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1612106028015},{"_id":"themes/aria/source/js/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1612106028015},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1612106028015},{"_id":"themes/aria/source/js/commentjs.js","hash":"c60e44a9aa66628bfcc0912ee3a10469b3c2899b","modified":1612106028015},{"_id":"themes/aria/source/js/custom.js","hash":"7e3e36b3ba8de9c168fa50d4b77449d9865b011a","modified":1612106028015},{"_id":"themes/aria/source/js/index.js","hash":"261b09f67d7ed011a4a1f5bb1342a5d203a2a89f","modified":1612106028022},{"_id":"themes/aria/source/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1612106028022},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","hash":"71cf4fbc9ebbc7ccf1c580cd0389f0a28df64bd6","modified":1612106028022},{"_id":"themes/aria/source/js/lg-hash.min.js","hash":"163a3eb6bdd227549bb7b5be61dffed36af474fa","modified":1612106028022},{"_id":"themes/aria/source/js/lg-pager.min.js","hash":"c4f5c7d91c87761f1626ebb411e5ed6d456799f0","modified":1612106028022},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","hash":"3f3024b3ff6a5266bd40ed890398d7f2393cd5a5","modified":1612106028022},{"_id":"themes/aria/source/js/lg-zoom.min.js","hash":"b26f6070ad290f937c49289bd52014677dd6073c","modified":1612106028022},{"_id":"themes/aria/source/js/lightgallery.min.js","hash":"c2101bab37ebcb47cc21a3b92611493a165e5a79","modified":1612106028022},{"_id":"themes/aria/source/js/marked.min.js","hash":"c9eb834a28665addef7e66ee1a787fa1cbbb43eb","modified":1612106028022},{"_id":"themes/aria/source/js/search.js","hash":"9ac9f869aa245a33f1bd72ea58c8168a2f0e9824","modified":1612106028022},{"_id":"themes/aria/source/js/scrollspy.js","hash":"724f9a0e12bd5c6a9d8cbf299ef4255621433cbf","modified":1612106028022},{"_id":"themes/aria/source/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1612106028022},{"_id":"themes/aria/source/js/util.js","hash":"f4d0034baaf346b532d1a1602c0b48963a018f23","modified":1612106028022},{"_id":"themes/aria/source/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1612106028022},{"_id":"themes/aria/source/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1612106028012},{"_id":"themes/aria/ARIA.png","hash":"4d9349d81236b2ad3384d92b5af789aafe71926e","modified":1612106028008},{"_id":"themes/aria/source/js/fontawesome-all.min.js","hash":"d7ff2806086f5924e06910e90a79b44492b52450","modified":1612106028022},{"_id":"public/about/index.html","hash":"b1695c3024c5e14144a598320f1e4be57806fbfe","modified":1612195676365},{"_id":"public/tags/index.html","hash":"b05573d812dd7dbb7bb5aab5a9c835c960b85a3f","modified":1612195676365},{"_id":"public/2021/02/01/Hello/index.html","hash":"4bc51292aded1617524d84338d42ea269b5e13cb","modified":1612195292967},{"_id":"public/archives/index.html","hash":"b0144e721d1e7c410f66fb989ca1294286d2f043","modified":1612195676365},{"_id":"public/archives/2021/index.html","hash":"a4e285f45d4cf2448fa04941556b09f98b312974","modified":1612195676365},{"_id":"public/archives/2021/01/index.html","hash":"a4e285f45d4cf2448fa04941556b09f98b312974","modified":1612195676365},{"_id":"public/archives/2021/02/index.html","hash":"3fa32124c2063ede5ca436cea043f6201975607a","modified":1612195292967},{"_id":"public/makefile/index.html","hash":"d7eb9fce085dee5a290b7eb8350c3896153451e8","modified":1612195676365},{"_id":"public/2021/01/31/hello-world/index.html","hash":"8663f095bd2ecfb2687ac56bae20c4cb0944f2b0","modified":1612195676365},{"_id":"public/index.html","hash":"8bd44a26cea887bbfaddffe017c60cec7985f8e2","modified":1612195676365},{"_id":"public/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1612195107011},{"_id":"public/fonts/lg.svg","hash":"50a2216596766a48655e3f87e1d1000ba93bf8a1","modified":1612195107011},{"_id":"public/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1612195107011},{"_id":"public/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1612195107011},{"_id":"public/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1612195107011},{"_id":"public/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1612195107011},{"_id":"public/css/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1612195107011},{"_id":"public/css/comment.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612195107011},{"_id":"public/css/atom-one-light.css","hash":"13e7620fe2842fa91cb309391a0b01a0c8712f12","modified":1612195107011},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612195107011},{"_id":"public/css/commentjs.css","hash":"d00731f87a5946fe70c893ba52ccc2b29c1f7ae6","modified":1612195107011},{"_id":"public/css/header.css","hash":"e85e9c85163aa331326dbaaf4be6f96b4a78cf7c","modified":1612195107011},{"_id":"public/css/info.css","hash":"6367db6485e32e42fedaa8f4a511b5e1461e58b9","modified":1612195107011},{"_id":"public/css/footer.css","hash":"d8607ae9fa69b6d24f9245153a7cc1b12b38c20b","modified":1612195107011},{"_id":"public/css/main.css","hash":"93ec56ace5345fe33a2472884b558435230d4310","modified":1612195107011},{"_id":"public/css/normalize.css","hash":"734a72e6c28d4a3a870404fb4abf72723c754296","modified":1612195107011},{"_id":"public/css/nav.css","hash":"0125102a60953f2220ff2cb1a068ee4a1cc1b9d5","modified":1612195107011},{"_id":"public/css/page.css","hash":"817e53d9594b484c1c94317d931d346ebef75023","modified":1612195107011},{"_id":"public/css/post.css","hash":"029dcc74105d025e757919cde29c1f97ebc14401","modified":1612195107011},{"_id":"public/css/reward.css","hash":"ceddf9d121de2f30a67148fd3b3c49a729976c29","modified":1612195107011},{"_id":"public/css/sidebar.css","hash":"5e9b719a7e1d29eee9150ef376615345e7dbea64","modified":1612195107011},{"_id":"public/css/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1612195107011},{"_id":"public/css/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1612195107011},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612195107011},{"_id":"public/js/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1612195107011},{"_id":"public/js/custom.js","hash":"7e3e36b3ba8de9c168fa50d4b77449d9865b011a","modified":1612195107011},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1612195107011},{"_id":"public/js/index.js","hash":"261b09f67d7ed011a4a1f5bb1342a5d203a2a89f","modified":1612195107011},{"_id":"public/js/lg-fullscreen.min.js","hash":"71cf4fbc9ebbc7ccf1c580cd0389f0a28df64bd6","modified":1612195107011},{"_id":"public/js/lg-hash.min.js","hash":"163a3eb6bdd227549bb7b5be61dffed36af474fa","modified":1612195107011},{"_id":"public/js/lg-pager.min.js","hash":"c4f5c7d91c87761f1626ebb411e5ed6d456799f0","modified":1612195107011},{"_id":"public/js/lg-thumbnail.min.js","hash":"3f3024b3ff6a5266bd40ed890398d7f2393cd5a5","modified":1612195107011},{"_id":"public/js/lg-zoom.min.js","hash":"b26f6070ad290f937c49289bd52014677dd6073c","modified":1612195107011},{"_id":"public/js/marked.min.js","hash":"c9eb834a28665addef7e66ee1a787fa1cbbb43eb","modified":1612195107011},{"_id":"public/js/scrollspy.js","hash":"724f9a0e12bd5c6a9d8cbf299ef4255621433cbf","modified":1612195107011},{"_id":"public/js/search.js","hash":"9ac9f869aa245a33f1bd72ea58c8168a2f0e9824","modified":1612195107011},{"_id":"public/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1612195107011},{"_id":"public/js/util.js","hash":"f4d0034baaf346b532d1a1602c0b48963a018f23","modified":1612195107011},{"_id":"public/css/index.css","hash":"08447cc8ce7db5bfb3c831adecd05765d8d18bb4","modified":1612195107011},{"_id":"public/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1612195107011},{"_id":"public/js/commentjs.js","hash":"c60e44a9aa66628bfcc0912ee3a10469b3c2899b","modified":1612195107011},{"_id":"public/js/lightgallery.min.js","hash":"c2101bab37ebcb47cc21a3b92611493a165e5a79","modified":1612195107011},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1612195107011},{"_id":"public/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1612195107011},{"_id":"public/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1612195107011},{"_id":"public/js/fontawesome-all.min.js","hash":"d7ff2806086f5924e06910e90a79b44492b52450","modified":1612195107011},{"_id":"source/_posts/m.md","hash":"c90bb5417e27f8acc46b231a54bfbb1641989242","modified":1612195238925},{"_id":"public/archives/2020/index.html","hash":"5b2f00171b75ada2bc99ad375e3cb38d1f28a9f6","modified":1612195676365},{"_id":"public/archives/2020/02/index.html","hash":"5b2f00171b75ada2bc99ad375e3cb38d1f28a9f6","modified":1612195676365},{"_id":"public/categories/c-c/index.html","hash":"3e52a6364993bcbecf495f9386a0f72eeb0586db","modified":1612195676365},{"_id":"public/tags/c-c/index.html","hash":"dc65c0f18edaae682797961adc5741aa4ba02577","modified":1612195676365},{"_id":"public/2020/02/01/m/index.html","hash":"3502f3f293660851bacf32b50ef5f60288874b27","modified":1612195292967},{"_id":"source/_posts/makefile.md","hash":"d4a6bed59f377946e42f160e032fbf74503fcb48","modified":1612195580864},{"_id":"public/2020/02/01/makefile/index.html","hash":"35359371a05a293bd7b2209a32d64670cd9f46bc","modified":1612195676365}],"Category":[{"name":"c/c++","_id":"ckkmrg5se000199l86fw508as"}],"Data":[],"Page":[{"title":"learn makefile","date":"2020-02-01T15:30:00.000Z","tags":"c/c++","categories":"c/c++","_content":"\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","source":"makefile/index.md","raw":"---\ntitle: learn makefile\ndate: 2020/2/1/23:30\ntags: c/c++\ncategories: c/c++\n---\n\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","updated":"2021-02-01T16:00:38.925Z","path":"makefile/index.html","_id":"ckkmrca9t0001xbl8dabn1a41","comments":1,"layout":"page","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\n<p>也可以一步到位</p>\n<p>为了解决：</p>\n<ol>\n<li>减少命令数，直接写成一个文件来进行执行</li>\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\n</ol>\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\n<p> <target>:<dependencies></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>添加了一些变量，进行简化</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n\n\n<p>引入$  ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $@代表target</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\n\n\n<p>wildcard 用于获取路径下指定模式的文件</p>\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>Static Pattern Rule</p>\n<p>targets: target-pattern: prereq-patterns</p>\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\n<p>使用</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\n<p>也可以一步到位</p>\n<p>为了解决：</p>\n<ol>\n<li>减少命令数，直接写成一个文件来进行执行</li>\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\n</ol>\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\n<p> <target>:<dependencies></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>添加了一些变量，进行简化</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n\n\n<p>引入$  ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $@代表target</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\n\n\n<p>wildcard 用于获取路径下指定模式的文件</p>\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>Static Pattern Rule</p>\n<p>targets: target-pattern: prereq-patterns</p>\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\n<p>使用</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\n"},{"title":"about","date":"2021-01-31T15:48:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-01-31 23:48:51\n---\n","updated":"2021-01-31T15:48:51.142Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckkmrca9v0003xbl8ejlj9o4p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-31T15:48:56.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-31 23:48:56\n---\n","updated":"2021-01-31T15:48:56.315Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkmrca9w0004xbl80bf6a3lw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-31T15:39:19.992Z","updated":"2021-01-31T15:39:19.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkmrca9u0002xbl8237n7cyy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"learn makefile","date":"2020-02-01T15:30:00.000Z","_content":"\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n<!--more-->\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","source":"_posts/makefile.md","raw":"---\ntitle: learn makefile\ndate: 2020/2/1/23:30\ntags: c/c++\ncategories: c/c++\n---\n\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n<!--more-->\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","slug":"makefile","published":1,"updated":"2021-02-01T16:06:20.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkmrmieo0000t3l87ge79x1r","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\n<p>也可以一步到位</p>\n<p>为了解决：</p>\n<ol>\n<li>减少命令数，直接写成一个文件来进行执行</li>\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\n</ol>\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\n<p> <target>:<dependencies></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>添加了一些变量，进行简化</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n\n\n<p>引入$  ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $@代表target</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\n\n\n<p>wildcard 用于获取路径下指定模式的文件</p>\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>Static Pattern Rule</p>\n<p>targets: target-pattern: prereq-patterns</p>\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\n<p>使用</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>","more":"<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\n<p>也可以一步到位</p>\n<p>为了解决：</p>\n<ol>\n<li>减少命令数，直接写成一个文件来进行执行</li>\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\n</ol>\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\n<p> <target>:<dependencies></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>添加了一些变量，进行简化</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\n\n\n<p>引入$  ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $@代表target</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\n\n\n<p>wildcard 用于获取路径下指定模式的文件</p>\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\n<p>Static Pattern Rule</p>\n<p>targets: target-pattern: prereq-patterns</p>\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\n<p>使用</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckkmrmieo0000t3l87ge79x1r","category_id":"ckkmrg5se000199l86fw508as","_id":"ckkmrmiet0002t3l8gfumdysx"}],"PostTag":[{"post_id":"ckkmrmieo0000t3l87ge79x1r","tag_id":"ckkmrg5sf000299l8a5078xs2","_id":"ckkmrmiet0001t3l8czmidppb"}],"Tag":[{"name":"c/c++","_id":"ckkmrg5sf000299l8a5078xs2"}]}}