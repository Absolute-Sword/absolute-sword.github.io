{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/aria/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/atom-one-light.css","path":"css/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/commentjs.css","path":"css/commentjs.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/footer.styl","path":"css/footer.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/header.styl","path":"css/header.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/info.styl","path":"css/info.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/lightgallery.min.css","path":"css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/nav.styl","path":"css/nav.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/reward.styl","path":"css/reward.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/sidebar.styl","path":"css/sidebar.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-dark.css","path":"css/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/solarized-light.css","path":"css/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/aria/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.eot","path":"fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/aria/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/aria/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/aria/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/aria/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/commentjs.js","path":"js/commentjs.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/fontawesome-all.min.js","path":"js/fontawesome-all.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","path":"js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-hash.min.js","path":"js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-pager.min.js","path":"js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","path":"js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lg-zoom.min.js","path":"js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/lightgallery.min.js","path":"js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/marked.min.js","path":"js/marked.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/timeago.min.js","path":"js/timeago.min.js","modified":0,"renderable":1},{"_id":"themes/aria/source/js/util.js","path":"js/util.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/.Surface-go.md.un~","hash":"90cc85c7c35aec62affa7f5a5abb43f9fac28a36","modified":1615036318134},{"_id":"source/_posts/.math-jax-test.md.un~","hash":"7abeb2e7c62ec251467550728008959ddd3f7fc5","modified":1615080996433},{"_id":"source/_posts/Object-Detection.md","hash":"457401f05425a26f34de6c2563dffdfc3a6d5948","modified":1615083072414},{"_id":"source/_posts/Surface-go.md","hash":"17485383b0559be8b599ac2847e91024d22541c2","modified":1615083489837},{"_id":"source/_posts/Surface-go.md~","hash":"9a2d1f3c23bc5f7bdd8b7969ab4e8e4ac34b1180","modified":1615036065111},{"_id":"source/_posts/makefile.md","hash":"a564f086b2f7cf605697d482f17e4afd44c6b497","modified":1615038686293},{"_id":"source/_posts/math-jax-test.md","hash":"6a65ac924f9b249fda8fe27addd508190cd81c76","modified":1615082154567},{"_id":"source/_posts/math-jax-test.md~","hash":"12bf55645178379e7fb77715b14b70e89bed90fb","modified":1615042065975},{"_id":"source/about/index.md","hash":"e5f243e8445523fda80035858734a32faf12ef85","modified":1615034083271},{"_id":"source/makefile/index.md","hash":"f39fb82644e6ce0f97115e8616e2aa4b73408b89","modified":1615034083273},{"_id":"source/tags/index.md","hash":"afa190ac15d0ea5479551752d8723e547a9934df","modified":1615034083275},{"_id":"themes/aria/._config.yml.un~","hash":"522713488337177e88385aaad1df2442e97ae06b","modified":1615082289875},{"_id":"themes/aria/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1615038686305},{"_id":"themes/aria/README.md","hash":"f03b27f001843f7e0aeaa5548618b8ffbe652327","modified":1615038686307},{"_id":"themes/aria/README.zh_CN.md","hash":"0d62551266c16e10b36bf5103d570e1e94e91992","modified":1615038686310},{"_id":"themes/aria/_config.yml","hash":"3d0640e26a6cebd6a5195f64c77d003e77a03963","modified":1615082289855},{"_id":"themes/aria/_config.yml.example","hash":"b0b73c6cce2dac9fce940ad3630d848bc7b207ae","modified":1615038686313},{"_id":"themes/aria/_config.yml~","hash":"2c758d44cdbd33609dde1ded8e9a6c3237958ead","modified":1615082253271},{"_id":"themes/aria/package.json","hash":"5b2ace3e57e7ca95420ecc061ff073eda89664b5","modified":1615038686341},{"_id":"themes/aria/languages/default.yml","hash":"ab81f3ccb132625a81c28f19c760a18a46838dfe","modified":1615038686315},{"_id":"themes/aria/languages/zh_CN.yml","hash":"78e2c45c05062203df3c31472cc94e861494f80f","modified":1615038686316},{"_id":"themes/aria/languages/en.yml","hash":"ab81f3ccb132625a81c28f19c760a18a46838dfe","modified":1615038686315},{"_id":"themes/aria/languages/zh_HK.yml","hash":"b17246baa97115b39a02a5c91d0f388dcbc8b339","modified":1615038686318},{"_id":"themes/aria/languages/zh_TW.yml","hash":"b17246baa97115b39a02a5c91d0f388dcbc8b339","modified":1615038686318},{"_id":"themes/aria/layout/.header.njk.kate-swp","hash":"455009eba9f44320110c652a1188cdb6aa02ed15","modified":1615038686321},{"_id":"themes/aria/layout/_layout.njk","hash":"7ad2d169eeb9b2753e7cd98425d04d215bcd611b","modified":1615038686322},{"_id":"themes/aria/layout/archive.njk","hash":"67e3d36bd41d6028be484833d1b8d4ad58de8e3c","modified":1615038686324},{"_id":"themes/aria/layout/categories.njk","hash":"231d1fa407836245331659479cd12b3e803e7fe0","modified":1615038686325},{"_id":"themes/aria/layout/category.njk","hash":"ad7e00a8c1b024118b4a6bcbf2744becbb686008","modified":1615038686326},{"_id":"themes/aria/layout/comment.njk","hash":"249dd02822b6de8c5dc80080d8cc25f6e629898d","modified":1615038686328},{"_id":"themes/aria/layout/footer.njk","hash":"980f4ad22f2cf8b5c0599e433d20efa09a532287","modified":1615038686329},{"_id":"themes/aria/layout/header.njk","hash":"eac8317c44b2465c789912bcb9aedad895800e88","modified":1615038686330},{"_id":"themes/aria/layout/index.njk","hash":"126af578a40190bfa9109411b54ffaeefca24aec","modified":1615038686331},{"_id":"themes/aria/layout/info.njk","hash":"8eedd696aff1c56c21f6cfa6bc532b34567cf6c1","modified":1615038686332},{"_id":"themes/aria/layout/page.njk","hash":"19147f4f85c89fbce8d215986a99e743f451a3f1","modified":1615038686334},{"_id":"themes/aria/layout/post.njk","hash":"1e288a91c1787db9e353029386bb2cc511f9368a","modified":1615038686335},{"_id":"themes/aria/layout/reward.njk","hash":"92d2646b593bbffccd0c9daf0f90828f17d14ab4","modified":1615038686336},{"_id":"themes/aria/layout/sidebar.njk","hash":"c4eadc5c82e3ff26be6d94acec9a8c4fbe7caa96","modified":1615038686337},{"_id":"themes/aria/layout/tag.njk","hash":"0c03238ce4b2de3ca293941fc0e384547268c0b2","modified":1615038686338},{"_id":"themes/aria/layout/tags.njk","hash":"fe2150ec15caa109f2d67e8a1e77e16821acb0cf","modified":1615038686340},{"_id":"themes/aria/scripts/regexp-tags.js","hash":"72227879bc9a543628661ff121965062f105e0d8","modified":1615038686343},{"_id":"themes/aria/source/css/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1615038686345},{"_id":"themes/aria/source/css/atom-one-light.css","hash":"e432dc56345e4c5e74baffb36ea1b72f469ec2b5","modified":1615038686346},{"_id":"themes/aria/source/css/comment.styl","hash":"b4896117254ad791066c66cf74010d18526e2c4a","modified":1615038686347},{"_id":"themes/aria/source/css/commentjs.css","hash":"c9121d34acb984b285f6e3ff17c1757cf76dad09","modified":1615038686349},{"_id":"themes/aria/source/css/custom.styl","hash":"38ce5ca0147b93e89d56b76064267c874685b2fe","modified":1615038686351},{"_id":"themes/aria/source/css/footer.styl","hash":"58863ce78a3eb61ec5fbbb06600580062aadc73b","modified":1615038686352},{"_id":"themes/aria/source/css/header.styl","hash":"4e4784ad4dee5de50d76f1416550438bd579b1cb","modified":1615038686353},{"_id":"themes/aria/source/css/index.styl","hash":"7d991606a4269a85a71125de763ed4a0873269ce","modified":1615038686354},{"_id":"themes/aria/source/css/info.styl","hash":"ac648302eb90a56477fd6653d644fd364479612f","modified":1615038686355},{"_id":"themes/aria/source/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1615038686356},{"_id":"themes/aria/source/css/main.styl","hash":"82ec2e07158ba9c114bbde3b2b94d7dc4aaad0f8","modified":1615038686357},{"_id":"themes/aria/source/css/nav.styl","hash":"55d8c1b166aa0b909ea58c7aaa96fe6fba26707f","modified":1615038686358},{"_id":"themes/aria/source/css/normalize.css","hash":"826bdf28095ebc25f5be69d58eadfc9e1b49b7f7","modified":1615038686359},{"_id":"themes/aria/source/css/page.styl","hash":"1df519120c2d2cf0f24b9ada2edf4f566c46e1fd","modified":1615038686361},{"_id":"themes/aria/source/css/post.styl","hash":"f35475bac616276916673a837931cf017e7d544b","modified":1615038686362},{"_id":"themes/aria/source/css/reward.styl","hash":"2e95f749d4750052c6a3b5cf79679c51453e7f2b","modified":1615038686363},{"_id":"themes/aria/source/css/sidebar.styl","hash":"7db5eff58c75e7b73fca474ca1d936e1f5c993c8","modified":1615038686364},{"_id":"themes/aria/source/css/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1615038686366},{"_id":"themes/aria/source/css/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1615038686367},{"_id":"themes/aria/source/css/variables.styl","hash":"5b98971cf2c7ff54fccb777fba8eaf1a44283ece","modified":1615038686369},{"_id":"themes/aria/source/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1615038686371},{"_id":"themes/aria/source/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1615038686373},{"_id":"themes/aria/source/fonts/lg.svg","hash":"1dba95664d2933fe1c22fb95a2e1e3a21839870b","modified":1615038686372},{"_id":"themes/aria/source/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1615038686374},{"_id":"themes/aria/source/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1615038686376},{"_id":"themes/aria/source/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1615038686383},{"_id":"themes/aria/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1615038686385},{"_id":"themes/aria/source/js/clipboard.min.js","hash":"dc144353ec85169bb3c5f3c6d68b4e75f9bf28ea","modified":1615038686386},{"_id":"themes/aria/source/js/commentjs.js","hash":"4a86e2daea116dc875445fe31815f0f43a8a7c78","modified":1615038686388},{"_id":"themes/aria/source/js/custom.js","hash":"4d04585e457716454ccb46843a7ff903981f7438","modified":1615038686389},{"_id":"themes/aria/source/js/highlight.min.js","hash":"a8442546e96c3c319f4298bfb2fab7060d389f50","modified":1615038686407},{"_id":"themes/aria/source/js/index.js","hash":"c1cc88e9c4e113a3cc7ebfe72336e8b89f32bd65","modified":1615038686408},{"_id":"themes/aria/source/js/lg-fullscreen.min.js","hash":"70c5a8c3598c19af1a50a7e5d1567483fb63c3c5","modified":1615038686411},{"_id":"themes/aria/source/js/lg-hash.min.js","hash":"52c10707088f9fcbdef6a7974d31de2b6190a679","modified":1615038686413},{"_id":"themes/aria/source/js/lg-pager.min.js","hash":"6f7572b2a27d1b4902eda27882c01e608ae59e06","modified":1615038686414},{"_id":"themes/aria/source/js/lg-thumbnail.min.js","hash":"703c7d187625f4cf16891748250b00aeb6ca5479","modified":1615038686415},{"_id":"themes/aria/source/js/lg-zoom.min.js","hash":"8f22823a55f11dc651700f59318fffd65eb47692","modified":1615038686416},{"_id":"themes/aria/source/js/lightgallery.min.js","hash":"5fac1b0ebb11c99e2ac268b19ed172191e55d23d","modified":1615038686418},{"_id":"themes/aria/source/js/marked.min.js","hash":"00b4113ded8994ff7b495c36e013a19bc142375e","modified":1615038686419},{"_id":"themes/aria/source/js/scrollspy.js","hash":"2eafc89dae69269d6d4c47d7bd746e717bd38230","modified":1615038686421},{"_id":"themes/aria/source/js/search.js","hash":"a38041aa761971a1cfe18bf6b6474e3d9412c065","modified":1615038686422},{"_id":"themes/aria/source/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1615038686423},{"_id":"themes/aria/source/js/util.js","hash":"bb56df6fc3768eb27d20ca7eab92c9654397d25e","modified":1615038686424},{"_id":"themes/aria/source/js/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1615038686410},{"_id":"themes/aria/source/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1615038686381},{"_id":"themes/aria/ARIA.png","hash":"4d9349d81236b2ad3384d92b5af789aafe71926e","modified":1615038686304},{"_id":"themes/aria/source/js/fontawesome-all.min.js","hash":"4dc5c54d10fc5c7eada0464e6060002a12859af7","modified":1615038686405},{"_id":"public/about/index.html","hash":"5e51ca29609861b385b221cd21546e9e50822663","modified":1615082814122},{"_id":"public/tags/index.html","hash":"b6118ecdf400a14157ca6b1e083dc9b5de71308d","modified":1615083497659},{"_id":"public/2021/03/06/math-jax-test/index.html","hash":"2cafaaa54157b7c944be8d5a8246f737c573833c","modified":1615082293498},{"_id":"public/2021/03/06/Surface-go/index.html","hash":"6dcc86ab608656b6ae30b88fbd6cc742f1ec7ec5","modified":1615083497659},{"_id":"public/categories/cs-learn/index.html","hash":"07e841507c2c59607620550da01f762a4ac60656","modified":1615082814122},{"_id":"public/categories/ml-learn/index.html","hash":"80e969fa9b17f39fdc453e86d9f64eaeb6f0cd11","modified":1615082814122},{"_id":"public/archives/index.html","hash":"6b850ba06f1e56dcb618b22b4b6a4abc3d4d7452","modified":1615082814122},{"_id":"public/archives/2020/index.html","hash":"69d56f26e9e01172f89be556cf2b80691c74d563","modified":1615082814122},{"_id":"public/archives/2020/02/index.html","hash":"69d56f26e9e01172f89be556cf2b80691c74d563","modified":1615082814122},{"_id":"public/archives/2021/index.html","hash":"8449a782eaf9a69a60dc405f7f149d26a5883a78","modified":1615082814122},{"_id":"public/archives/2021/03/index.html","hash":"8449a782eaf9a69a60dc405f7f149d26a5883a78","modified":1615082814122},{"_id":"public/tags/c-c/index.html","hash":"0d09cbde5636aa73b9e4a6c1b268856e59a81c84","modified":1615082814122},{"_id":"public/tags/ml/index.html","hash":"aa6fa68290cfa03cd22b7b533628db6b87c6dfa1","modified":1615082814122},{"_id":"public/tags/dl/index.html","hash":"41f21fb6de4e8c5817721c1ee381659a62aff51f","modified":1615082814122},{"_id":"public/tags/object-detection/index.html","hash":"b4e1231e1dd4817a7b1819eefac2cfbe1b31aa6d","modified":1615082814122},{"_id":"public/tags/x/index.html","hash":"1df60d896799e926bc1d15b813b4163d7cc75e3e","modified":1615082293498},{"_id":"public/tags/��/index.html","hash":"2179bbd91709e64ceeafaf295e65e629de17c4f9","modified":1615082814122},{"_id":"public/makefile/index.html","hash":"c040877fc8b9bd4fc71fabfd2f097d28805c94cc","modified":1615082814122},{"_id":"public/2020/02/18/Object-Detection/index.html","hash":"29e316c0ac4c32d1bed07c16a68c57a1a76b3791","modified":1615083079855},{"_id":"public/2020/02/01/makefile/index.html","hash":"9a61c9ac15eb579e7702a3c444c55583b31f6cb1","modified":1615082814122},{"_id":"public/index.html","hash":"9b37893160d2909d288883c11ab3778ea89fb4fa","modified":1615083497659},{"_id":"public/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1615042079177},{"_id":"public/fonts/lg.svg","hash":"1dba95664d2933fe1c22fb95a2e1e3a21839870b","modified":1615042079177},{"_id":"public/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1615042079177},{"_id":"public/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1615042079177},{"_id":"public/images/avatar.png","hash":"e63be2fab169a0478af27c47240d1d123fa2b2ba","modified":1615042079177},{"_id":"public/images/logo.png","hash":"fa35ee718a416900fd4b401300fa995a86c234ad","modified":1615042079177},{"_id":"public/css/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1615042079177},{"_id":"public/css/atom-one-light.css","hash":"13e7620fe2842fa91cb309391a0b01a0c8712f12","modified":1615042079177},{"_id":"public/css/comment.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615042079177},{"_id":"public/css/commentjs.css","hash":"d00731f87a5946fe70c893ba52ccc2b29c1f7ae6","modified":1615042079177},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615042079177},{"_id":"public/css/footer.css","hash":"d8607ae9fa69b6d24f9245153a7cc1b12b38c20b","modified":1615042079177},{"_id":"public/css/header.css","hash":"e85e9c85163aa331326dbaaf4be6f96b4a78cf7c","modified":1615042079177},{"_id":"public/css/info.css","hash":"6367db6485e32e42fedaa8f4a511b5e1461e58b9","modified":1615042079177},{"_id":"public/css/main.css","hash":"93ec56ace5345fe33a2472884b558435230d4310","modified":1615042079177},{"_id":"public/css/nav.css","hash":"0125102a60953f2220ff2cb1a068ee4a1cc1b9d5","modified":1615042079177},{"_id":"public/css/page.css","hash":"817e53d9594b484c1c94317d931d346ebef75023","modified":1615042079177},{"_id":"public/css/normalize.css","hash":"734a72e6c28d4a3a870404fb4abf72723c754296","modified":1615042079177},{"_id":"public/css/post.css","hash":"029dcc74105d025e757919cde29c1f97ebc14401","modified":1615042079177},{"_id":"public/css/reward.css","hash":"ceddf9d121de2f30a67148fd3b3c49a729976c29","modified":1615042079177},{"_id":"public/css/sidebar.css","hash":"5e9b719a7e1d29eee9150ef376615345e7dbea64","modified":1615042079177},{"_id":"public/css/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1615042079177},{"_id":"public/css/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1615042079177},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615042079177},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1615042079177},{"_id":"public/js/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1615042079177},{"_id":"public/js/custom.js","hash":"7e3e36b3ba8de9c168fa50d4b77449d9865b011a","modified":1615042079177},{"_id":"public/js/index.js","hash":"261b09f67d7ed011a4a1f5bb1342a5d203a2a89f","modified":1615042079177},{"_id":"public/js/lg-fullscreen.min.js","hash":"71cf4fbc9ebbc7ccf1c580cd0389f0a28df64bd6","modified":1615042079177},{"_id":"public/js/lg-pager.min.js","hash":"c4f5c7d91c87761f1626ebb411e5ed6d456799f0","modified":1615042079177},{"_id":"public/js/lg-hash.min.js","hash":"163a3eb6bdd227549bb7b5be61dffed36af474fa","modified":1615042079177},{"_id":"public/js/lg-thumbnail.min.js","hash":"3f3024b3ff6a5266bd40ed890398d7f2393cd5a5","modified":1615042079177},{"_id":"public/js/lg-zoom.min.js","hash":"b26f6070ad290f937c49289bd52014677dd6073c","modified":1615042079177},{"_id":"public/js/marked.min.js","hash":"c9eb834a28665addef7e66ee1a787fa1cbbb43eb","modified":1615042079177},{"_id":"public/js/scrollspy.js","hash":"724f9a0e12bd5c6a9d8cbf299ef4255621433cbf","modified":1615042079177},{"_id":"public/js/search.js","hash":"9ac9f869aa245a33f1bd72ea58c8168a2f0e9824","modified":1615042079177},{"_id":"public/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1615042079177},{"_id":"public/js/util.js","hash":"f4d0034baaf346b532d1a1602c0b48963a018f23","modified":1615042079177},{"_id":"public/css/index.css","hash":"08447cc8ce7db5bfb3c831adecd05765d8d18bb4","modified":1615042079177},{"_id":"public/css/lightgallery.min.css","hash":"9e76bdad163856774a96b1230a08dc506600a973","modified":1615042079177},{"_id":"public/js/commentjs.js","hash":"c60e44a9aa66628bfcc0912ee3a10469b3c2899b","modified":1615042079177},{"_id":"public/js/lightgallery.min.js","hash":"c2101bab37ebcb47cc21a3b92611493a165e5a79","modified":1615042079177},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1615042079177},{"_id":"public/images/background.png","hash":"c34366140a0250afbd73d62abdc58b1e00e10355","modified":1615042079177},{"_id":"public/js/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1615042079177},{"_id":"public/js/fontawesome-all.min.js","hash":"d7ff2806086f5924e06910e90a79b44492b52450","modified":1615042079177},{"_id":"public/tags/life/index.html","hash":"d13c924f3be3971b6a3b092a4ecac1a8cdbf0625","modified":1615083497659}],"Category":[{"name":"cs-learn","_id":"cklxucsun000498xlgeqt7sp5"},{"name":"ml-learn","_id":"cklxucsv2000998xl3z7rcwvo"}],"Data":[],"Page":[{"title":"about","date":"2021-01-31T15:48:51.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-01-31 23:48:51\n---\n","updated":"2021-03-06T12:34:43.271Z","path":"about/index.html","comments":1,"layout":"page","_id":"cklxucsu4000098xldugh8g7r","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"learn makefile","date":"2020-02-01T15:30:00.000Z","tags":"c/c++","categories":"c/c++","_content":"\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","source":"makefile/index.md","raw":"---\ntitle: learn makefile\ndate: 2020/2/1/23:30\ntags: c/c++\ncategories: c/c++\n---\n\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","updated":"2021-03-06T12:34:43.273Z","path":"makefile/index.html","comments":1,"layout":"page","_id":"cklxucsuh000298xl63q465rn","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\r\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\r\n<p>也可以一步到位</p>\r\n<p>为了解决：</p>\r\n<ol type=\"1\">\r\n<li>减少命令数，直接写成一个文件来进行执行</li>\r\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\r\n</ol>\r\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\r\n<p><target>:<dependencies></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\r\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>添加了一些变量，进行简化</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>引入$ ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $<span class=\"citation\" data-cites=\"代表target\">@代表target</span></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\r\n<p>wildcard 用于获取路径下指定模式的文件</p>\r\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\r\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\r\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>Static Pattern Rule</p>\r\n<p>targets: target-pattern: prereq-patterns</p>\r\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\r\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\r\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\r\n<p>使用</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\r\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\r\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\r\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\r\n<p>也可以一步到位</p>\r\n<p>为了解决：</p>\r\n<ol type=\"1\">\r\n<li>减少命令数，直接写成一个文件来进行执行</li>\r\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\r\n</ol>\r\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\r\n<p><target>:<dependencies></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\r\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>添加了一些变量，进行简化</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>引入$ ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $<span class=\"citation\" data-cites=\"代表target\">@代表target</span></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\r\n<p>wildcard 用于获取路径下指定模式的文件</p>\r\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\r\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\r\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>Static Pattern Rule</p>\r\n<p>targets: target-pattern: prereq-patterns</p>\r\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\r\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\r\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\r\n<p>使用</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\r\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\r\n"},{"title":"tags","date":"2021-01-31T15:48:56.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-31 23:48:56\n---\n","updated":"2021-03-06T12:34:43.275Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cklxucsus000698xlfzp0hygx","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"learn makefile","date":"2020-02-01T15:30:00.000Z","_content":"\n\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n<!--more-->\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","source":"_posts/makefile.md","raw":"---\ntitle: learn makefile\ndate: 2020/2/1/23:30\ntags: c/c++\ncategories: cs-learn\n---\n\n\n```bash\ng++ -c func1.cpp\ng++ -c func2.cpp\ng++ -c main.cpp \ng++ -o func main.o fun1.o fun2.o\n```\n\n\n使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求\n\n<!--more-->\n\n```text\ng++ -o hello main.cpp function1.cpp function2.cpp\n```\n\n也可以一步到位\n\n为了解决：\n\n1. 减少命令数，直接写成一个文件来进行执行\n2. 避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译\n\n另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件\n\n <target>:<dependencies>\n\n```makefile\n# the 1-ed\nall:\n   g++ -o func main.cpp func1.cpp func2.cpp\nclean:\n   rm -rf *.o func\n```\n\nall和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）\n\n\n\n```makefile\n# the 2-ed\nall: func\nfunc: main.o func1.o func2.o\n      g++ main.o func1.o func2.o -o func\nmain.o: main.cpp\n      g++ -c main.cpp\nfunc1.o: func1.cpp\n      g++ -c func1.cpp\nfunc2.o: func2.cpp\n      g++ -c func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回\n\n在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动\n\n\n\n```makefile\n# the 3-ed\n\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) main.o func1.o func2.o -o func\nmain.o: main.cpp\n      $(cc) $(CFLAGS) main.cpp\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) func1.cpp\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) func2.cpp\nclean:\n      rm -rf *.o func\n```\n\n添加了一些变量，进行简化\n\n\n\n\n\n```makefile\n# the 4-ed\ncc = g++\nCFLAGS = -c -Wall # -Wall是显示所有的warning\nOFLAGS = -Wall\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      rm -rf *.o func\n```\n\n\n\n引入\\$  ^代表所有的依赖， \\$<代表第一个依赖（对于单参数如func1.o的，\\$<和\\$^都可以）， $@代表target\n\n\n\n```makefile\n# the 5-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp) # 用于获取路径下指定模式的文件\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE)) # 用于从一个模式的文件更换为另一个模式文件\nall: func\nfunc: main.o func1.o func2.o\n      $(cc) $(OFLAGS) $^ -o $@\nmain.o: main.cpp\n      $(cc) $(CFLAGS) $<\nfunc1.o: func1.cpp\n      $(cc) $(CFLAGS) $<\nfunc2.o: func2.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func \n```\n\n\n\nwildcard 用于获取路径下指定模式的文件\n\npatsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件\n\nrm处加入@可以避免回显，否则执行clean时也会输出rm命令\n\n可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已\n\n\n\n```makefile\n# the 6-ed\ncc = g++\nCFLAGS = -c -Wall\nOFLAGS = -Wall\nSOURCE_DIR = .\nSOURCE_FILE = $(wildcard $(SOURCE_DIR)/*.cpp)\nOBJS = $(patsubst %.cpp, %.o, $(SOURCE_FILE))\nall: func\nfunc: $(OBJS)\n      $(cc) $(OFLAGS) $^ -o $@\n$(OBJS):%.o:$.cpp\n      $(cc) $(CFLAGS) $<\nclean:\n      @rm -rf *.o func\n```\n\nStatic Pattern Rule\n\ntargets: target-pattern: prereq-patterns\n\n即将本来的单个target替换成一组target，将具有类型模式的都归为一组\n\ntarget-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的\n\n\n\n另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号\n\n使用\n\n```makefile\nobjs = xxx\\\n\tyyy\\\n\tzzz\\\n```\n\n可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加\n","slug":"makefile","published":1,"updated":"2021-03-06T13:51:26.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklxucsua000198xlhffxg3ny","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\r\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>\r\n<a id=\"more\"></a>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\r\n<p>也可以一步到位</p>\r\n<p>为了解决：</p>\r\n<ol type=\"1\">\r\n<li>减少命令数，直接写成一个文件来进行执行</li>\r\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\r\n</ol>\r\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\r\n<p><target>:<dependencies></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\r\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>添加了一些变量，进行简化</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>引入$ ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $<span class=\"citation\" data-cites=\"代表target\">@代表target</span></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\r\n<p>wildcard 用于获取路径下指定模式的文件</p>\r\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\r\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\r\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>Static Pattern Rule</p>\r\n<p>targets: target-pattern: prereq-patterns</p>\r\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\r\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\r\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\r\n<p>使用</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\r\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>\r\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">g++ -c func1.cpp<br>g++ -c func2.cpp<br>g++ -c main.cpp <br>g++ -o func main.o fun1.o fun2.o<br></code></pre></td></tr></table></figure>\r\n<p>使用g++ -c 进行编译为对象文件，使用g++ -o来进行链接，链接时的文件顺序无要求</p>","more":"<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">g++ -o hello main.cpp function1.cpp function2.cpp<br></code></pre></td></tr></table></figure>\r\n<p>也可以一步到位</p>\r\n<p>为了解决：</p>\r\n<ol type=\"1\">\r\n<li>减少命令数，直接写成一个文件来进行执行</li>\r\n<li>避免每次修改文件之后都需要重新将所有文件进行编译，让make通过时间戳看文件是否改动过，改动过才需要重新编译</li>\r\n</ol>\r\n<p>另外，在clion中，会将所有文件名为makefile及其变体（任意字母转为大小写）都视为makefile文件，但是在执行make的时候还是只会识别makefile和Makefile文件</p>\r\n<p><target>:<dependencies></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 1-ed</span><br><span class=\"hljs-section\">all:</span><br>   g++ -o func main.cpp func1.cpp func2.cpp<br><span class=\"hljs-section\">clean:</span><br>   rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>all和clean是一个target，使用make clean和make all就可以激活对应target，分别执行对应的依赖（指令）</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 2-ed</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      g++ main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      g++ -c main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      g++ -c func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      g++ -c func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>执行make时，等价于make all（等价于执行最上面的一条target），此时all的target依赖于func，但是本地没有func，make继续往下找func，func的target依赖于main.o，本地也没有，就找到main.o的target就是main.cpp，存在本地，继续完成该依赖即g++ -c main.cpp，之后一级一级返回</p>\r\n<p>在第一次执行make时，输出会显示所有文件都被编译了一遍，之后如果修改了某个文件，只会编译有变化的文件，如果没修改执行make，会显示make没有任何改动</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 3-ed</span><br><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> main.o func1.o func2.o -o func<br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> main.cpp<br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func1.cpp<br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> func2.cpp<br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>添加了一些变量，进行简化</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 4-ed</span><br>cc = g++<br>CFLAGS = -c -Wall <span class=\"hljs-comment\"># -Wall是显示所有的warning</span><br>OFLAGS = -Wall<br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>引入$ ^代表所有的依赖， $&lt;代表第一个依赖（对于单参数如func1.o的，$&lt;和$^都可以）， $<span class=\"citation\" data-cites=\"代表target\">@代表target</span></p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 5-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span> <span class=\"hljs-comment\"># 用于获取路径下指定模式的文件</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span> <span class=\"hljs-comment\"># 用于从一个模式的文件更换为另一个模式文件</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: main.o func1.o func2.o</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-section\">main.o: main.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func1.o: func1.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">func2.o: func2.cpp</span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func <br></code></pre></td></tr></table></figure>\r\n<p>wildcard 用于获取路径下指定模式的文件</p>\r\n<p>patsubst (pattern subsitution)用于从一个模式的文件更换为另一个模式文件</p>\r\n<p>rm处加入@可以避免回显，否则执行clean时也会输出rm命令</p>\r\n<p>可以注意到main.o,func1.o,func2.o基本上都是一样的，只是换了一个名字而已</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\"># the 6-ed</span><br>cc = g++<br>CFLAGS = -c -Wall<br>OFLAGS = -Wall<br>SOURCE_DIR = .<br>SOURCE_FILE = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">wildcard</span> <span class=\"hljs-variable\">$(SOURCE_DIR)</span>/*.cpp)</span><br>OBJS = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">patsubst</span> %.cpp, %.o, <span class=\"hljs-variable\">$(SOURCE_FILE)</span>)</span><br><span class=\"hljs-section\">all: func</span><br><span class=\"hljs-section\">func: <span class=\"hljs-variable\">$(OBJS)</span></span><br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(OFLAGS)</span> <span class=\"hljs-variable\">$^</span> -o <span class=\"hljs-variable\">$@</span><br><span class=\"hljs-variable\">$(OBJS)</span>:%.o:$.cpp<br>      <span class=\"hljs-variable\">$(cc)</span> <span class=\"hljs-variable\">$(CFLAGS)</span> <span class=\"hljs-variable\">$&lt;</span><br><span class=\"hljs-section\">clean:</span><br>      @rm -rf *.o func<br></code></pre></td></tr></table></figure>\r\n<p>Static Pattern Rule</p>\r\n<p>targets: target-pattern: prereq-patterns</p>\r\n<p>即将本来的单个target替换成一组target，将具有类型模式的都归为一组</p>\r\n<p>target-paatern即target文件的模式，prereq-patterns即依赖文件的模式，每个文件都是一一对应的</p>\r\n<p>另外，使用变量的时候，对于单个字母命名的变量不需要使用括号即可引用，但是对于大于1个字母的就都要使用括号</p>\r\n<p>使用</p>\r\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">objs = xxx\\<br>\tyyy\\<br>\tzzz\\<br></code></pre></td></tr></table></figure>\r\n<p>可以定义一个类似数组的结构，之后可以使用OBJS+=ppp.o来添加</p>"},{"title":"目标检测总结","date":"2020-02-18T14:41:00.000Z","_content":"\n\n\n###  改进主流网络\n\n#### Two-stage\n\nR-CNN：Selective Search\n\n $\\longrightarrow$ Fast R-CNN： 将所有候选区域都送入CNN转为特征图的步骤改为直接将原图传入CNN后，在得到的特征图上寻找候选框对应的区域    \n\n$~\\longrightarrow$  Faster R-CNN:  增加了RPN，用来替代原先的候选框搜索   \n\n $~~\\longrightarrow$  RFCN：Faster R-CNN中的ROI，用来从不同尺寸的特征图得到统一输出尺寸，由于ROI后的网络不具有平移不变性，且ROI后的层数会影响检测效率，改进的RFCN使用位置敏感得分图来代替感兴趣判断子网络（ROI和感兴趣判断子网络有区别吗？），并利用位置敏感的ROI池化层，直接对池化后结果进行判别。  \n\n $~~\\longrightarrow$  Mask R-CNN： 在Faster R-CNN中池化的时候都进行了取整操作，会影响语义分割等像素级别任务的精度，Mask R-CNN使用双线性插值填补非整数位置像素。   \n\n$~~\\longrightarrow$ 后处理的改进： NMS/Soft-NMS/Softer-NMS\n\n<!--more-->\n\n#### One-stage\n\nYOLO-v1\n\n$~\\longrightarrow$ SSD：在后几层卷积上对不同尺度上的特征图运用anchor方法进行候选框提取\n\n$~~\\longrightarrow$ YOLO-v2：增加了批归一化，高分辨率分类器，直接目标框位置检测，多尺度训练\n\n$~\\longrightarrow$ YOLO-v3：改进了backbone（v3中的池化基本由卷积实现，引入残差块），结合特征金字塔网络FPN\n\n#### One-stage + Two-stage\n\n$~\\longrightarrow$ RON：将SSD与Faster R-CNN相结合，改进backbone使用了与RPN相似的策略来引导目标对象搜索\n\n$~\\longrightarrow$ RefineDet：融合了RPN，FPN，SSD，（比较复杂，看不懂）\n\n### 小目标检测\n\n#### backbone改进\n\n$~\\longrightarrow$ DetNet：基于RestNet-50改进\n\n$~\\longrightarrow$ DenseNet：使用了密集块进行层与层的连接\n\n$~~\\longrightarrow$ STDN：将DenseNet作为特征提取网络，引入尺寸转换层\n\n#### 增加感受野\n\n$\\longrightarrow$ RFB：在Inception的基础上加入膨胀卷积/空洞卷积，增大感受野\n\n$\\longrightarrow$ TridenNet：以ResNet-101作为backbone，加入空洞卷积，通过多分支结构，权重共享和指定尺度过滤训练\n\n#### 特征融合\n\nFPN\n\n$\\longrightarrow$FPN+RPN\n\n$\\longrightarrow$DES：提高低层特征图语义信息与高层特征语义信息\n\n$\\longrightarrow$NAS-FPN：由于FPN是人为设计的，因此可使用强化学习在一个包含所有跨尺度连接的可拓展搜索空间中   选择最优的特征金字塔架构\n\n#### 级联卷积神经网络\n\n$\\longrightarrow$Faster R-CNN：将两个RPN进行级联优化\n\n$\\longrightarrow$Intertive BBox：在检测阶段（应该就是推理阶段）使用级联的网络架构，将前一个检测模型回归得到的边界框初始化为下一个检测模型的边界框，迭代三次\n\n$\\longrightarrow$Integral loss：针对迭代式边界框回归（如Intertive BBox）单一IOU阈值的问题，将Intertive BBox的三次迭代改为三条支路，每条支路使用不同的IOU阈值\n\n$\\longrightarrow$ Cascade R-CNN：该模型基于前一阶段的输出进行训练，与Intertive BBox相比应该就是Intertive BBox在推理时的结构与其一致，Integral Loss使用的是不同重叠度阈值训练得到的。同时Cascade R-CNN也包含了不同IOU阈值的回归网络，用来提高IOU阈值下的正样本比例。\n\n$\\longrightarrow$HRNet：使用高分辨率的子网络作为第一阶段，然后逐渐并行添加较低分辨率的子网络，得到多个阶段的子网络的输出，之后输出又可以重新传到第一阶段的高分辨率特征图，与其进行融合。\n\n#### 模型训练方式\n\n$\\longrightarrow$YOLO-v2：YOLO-v2的输入是416×416，而backbone在ImageNet的预训练模型使用的是224×224,v2就先在416×416的ImageNet上预训练了网络。\n\n$\\longrightarrow$SNIP：图像金子塔的尺寸归一化，使用图像金字塔来处理不同尺寸的数据，bp时只将与预训练模型所基于的训练数据尺寸相对应的ROI的梯度进行回传。\n\n$\\longrightarrow$perceptual GAN：将所有的物体分为大物体和小物体两个子集,通过挖掘不同尺度物体间的结构关联，perceptual GAN 包含两个子网络: 生成网络( 小物体) 和判别网络 ( 大物体) 。生成网络使用深度残差特征生成模型,通过引入低层细粒度的特征将原始较差的特征转换为高分辨的特征; 判别网络包含两个分支:对抗分支和感知分支,对抗分支用来分辨小物体生成的高分辨率特征与真实的大物体特征,感知分支则通过感知损失提升检测率 。\n\n### 多类别物体检测\n\n#### 训练方式优化\n\n$\\longrightarrow$LSDA：LSDA 首先利用分类数据集初始化神经网络,然后再利用检测数据集进行微调,最后将检测数据集训练的参数迁移到没有检测标签的类别上来实现提高目标检测类别数目\n\n$\\longrightarrow$YOLO9000：使用联合训练策略通过使用标记为检测的图像来学习边界框的坐标预测和目标类别的特定信息 ,将检\n测和分类数据集混合用于模型训练。 当网络看到标记为检测的图像时,能够基于完整的 YOLOv2 损失函数进行反向传播;当看到一个分类的图像时,只能够从该架构的分类特定部分反向传播损失 。还使用了WordNet（看不懂）。\n\n$\\longrightarrow$软采样：将ROI 的梯度重设为与正实例重叠的函数,确保不确定的背景区域相对于难样本 ( hard negative) 的权重更小\n\n#### 网络结构改进\n\n$\\longrightarrow$R-FCN-3000：R-FCN中的位置敏感得分对于多类别情况下计算量会急剧增加，因此提出R-FCN-3000，该网络分为两条支路，一条与R-FCN类似，进行大类别检测，另一条用来进行细粒度分类（所有类别），最终将两条支路得到的类别分数相乘，得到最终的分数\n\n$\\longrightarrow$HSJT：HSJT 首先利用目标类别之间的关系,建立新的层次网络模型,进一步提高识别性能;其次将边界框级标记图像和图像级标记图像结合起来进行联合训练 ,提出一种联合训练生成大规模半监督目标检测的方法 。\n\n### 轻量化模型\n\n$\\longrightarrow$MobileNet-v1：将传统卷积分为深度可分离卷积（即一个卷积核只负责对一个特征图进行卷积）+逐点卷积（1×1卷积）\n\n$~\\longrightarrow$MobileNet-v2：增加了Linear bottlenecks，去除小维度输出层后的非线性激活层，增加了inverted residual block，对维度先扩增再缩减。\n\n$~~\\longrightarrow$MobileNet-v3：加入互补搜索技术组合（通过NAS进行架构设计），进行网络结构改进\n\n$\\longrightarrow$ShuffleNetv1：\n\n$~\\longrightarrow$ShuffleNetc2:\n\n\n\nILSVRC = ImageNet Large Scale Visual Recognition Challenge","source":"_posts/Object-Detection.md","raw":"---\ntitle: 目标检测总结\ndate: 2020/2/18/22:41\ntags: \n- ml\n- dl \n- object-detection\ncategories: \n- ml-learn\n---\n\n\n\n###  改进主流网络\n\n#### Two-stage\n\nR-CNN：Selective Search\n\n $\\longrightarrow$ Fast R-CNN： 将所有候选区域都送入CNN转为特征图的步骤改为直接将原图传入CNN后，在得到的特征图上寻找候选框对应的区域    \n\n$~\\longrightarrow$  Faster R-CNN:  增加了RPN，用来替代原先的候选框搜索   \n\n $~~\\longrightarrow$  RFCN：Faster R-CNN中的ROI，用来从不同尺寸的特征图得到统一输出尺寸，由于ROI后的网络不具有平移不变性，且ROI后的层数会影响检测效率，改进的RFCN使用位置敏感得分图来代替感兴趣判断子网络（ROI和感兴趣判断子网络有区别吗？），并利用位置敏感的ROI池化层，直接对池化后结果进行判别。  \n\n $~~\\longrightarrow$  Mask R-CNN： 在Faster R-CNN中池化的时候都进行了取整操作，会影响语义分割等像素级别任务的精度，Mask R-CNN使用双线性插值填补非整数位置像素。   \n\n$~~\\longrightarrow$ 后处理的改进： NMS/Soft-NMS/Softer-NMS\n\n<!--more-->\n\n#### One-stage\n\nYOLO-v1\n\n$~\\longrightarrow$ SSD：在后几层卷积上对不同尺度上的特征图运用anchor方法进行候选框提取\n\n$~~\\longrightarrow$ YOLO-v2：增加了批归一化，高分辨率分类器，直接目标框位置检测，多尺度训练\n\n$~\\longrightarrow$ YOLO-v3：改进了backbone（v3中的池化基本由卷积实现，引入残差块），结合特征金字塔网络FPN\n\n#### One-stage + Two-stage\n\n$~\\longrightarrow$ RON：将SSD与Faster R-CNN相结合，改进backbone使用了与RPN相似的策略来引导目标对象搜索\n\n$~\\longrightarrow$ RefineDet：融合了RPN，FPN，SSD，（比较复杂，看不懂）\n\n### 小目标检测\n\n#### backbone改进\n\n$~\\longrightarrow$ DetNet：基于RestNet-50改进\n\n$~\\longrightarrow$ DenseNet：使用了密集块进行层与层的连接\n\n$~~\\longrightarrow$ STDN：将DenseNet作为特征提取网络，引入尺寸转换层\n\n#### 增加感受野\n\n$\\longrightarrow$ RFB：在Inception的基础上加入膨胀卷积/空洞卷积，增大感受野\n\n$\\longrightarrow$ TridenNet：以ResNet-101作为backbone，加入空洞卷积，通过多分支结构，权重共享和指定尺度过滤训练\n\n#### 特征融合\n\nFPN\n\n$\\longrightarrow$FPN+RPN\n\n$\\longrightarrow$DES：提高低层特征图语义信息与高层特征语义信息\n\n$\\longrightarrow$NAS-FPN：由于FPN是人为设计的，因此可使用强化学习在一个包含所有跨尺度连接的可拓展搜索空间中   选择最优的特征金字塔架构\n\n#### 级联卷积神经网络\n\n$\\longrightarrow$Faster R-CNN：将两个RPN进行级联优化\n\n$\\longrightarrow$Intertive BBox：在检测阶段（应该就是推理阶段）使用级联的网络架构，将前一个检测模型回归得到的边界框初始化为下一个检测模型的边界框，迭代三次\n\n$\\longrightarrow$Integral loss：针对迭代式边界框回归（如Intertive BBox）单一IOU阈值的问题，将Intertive BBox的三次迭代改为三条支路，每条支路使用不同的IOU阈值\n\n$\\longrightarrow$ Cascade R-CNN：该模型基于前一阶段的输出进行训练，与Intertive BBox相比应该就是Intertive BBox在推理时的结构与其一致，Integral Loss使用的是不同重叠度阈值训练得到的。同时Cascade R-CNN也包含了不同IOU阈值的回归网络，用来提高IOU阈值下的正样本比例。\n\n$\\longrightarrow$HRNet：使用高分辨率的子网络作为第一阶段，然后逐渐并行添加较低分辨率的子网络，得到多个阶段的子网络的输出，之后输出又可以重新传到第一阶段的高分辨率特征图，与其进行融合。\n\n#### 模型训练方式\n\n$\\longrightarrow$YOLO-v2：YOLO-v2的输入是416×416，而backbone在ImageNet的预训练模型使用的是224×224,v2就先在416×416的ImageNet上预训练了网络。\n\n$\\longrightarrow$SNIP：图像金子塔的尺寸归一化，使用图像金字塔来处理不同尺寸的数据，bp时只将与预训练模型所基于的训练数据尺寸相对应的ROI的梯度进行回传。\n\n$\\longrightarrow$perceptual GAN：将所有的物体分为大物体和小物体两个子集,通过挖掘不同尺度物体间的结构关联，perceptual GAN 包含两个子网络: 生成网络( 小物体) 和判别网络 ( 大物体) 。生成网络使用深度残差特征生成模型,通过引入低层细粒度的特征将原始较差的特征转换为高分辨的特征; 判别网络包含两个分支:对抗分支和感知分支,对抗分支用来分辨小物体生成的高分辨率特征与真实的大物体特征,感知分支则通过感知损失提升检测率 。\n\n### 多类别物体检测\n\n#### 训练方式优化\n\n$\\longrightarrow$LSDA：LSDA 首先利用分类数据集初始化神经网络,然后再利用检测数据集进行微调,最后将检测数据集训练的参数迁移到没有检测标签的类别上来实现提高目标检测类别数目\n\n$\\longrightarrow$YOLO9000：使用联合训练策略通过使用标记为检测的图像来学习边界框的坐标预测和目标类别的特定信息 ,将检\n测和分类数据集混合用于模型训练。 当网络看到标记为检测的图像时,能够基于完整的 YOLOv2 损失函数进行反向传播;当看到一个分类的图像时,只能够从该架构的分类特定部分反向传播损失 。还使用了WordNet（看不懂）。\n\n$\\longrightarrow$软采样：将ROI 的梯度重设为与正实例重叠的函数,确保不确定的背景区域相对于难样本 ( hard negative) 的权重更小\n\n#### 网络结构改进\n\n$\\longrightarrow$R-FCN-3000：R-FCN中的位置敏感得分对于多类别情况下计算量会急剧增加，因此提出R-FCN-3000，该网络分为两条支路，一条与R-FCN类似，进行大类别检测，另一条用来进行细粒度分类（所有类别），最终将两条支路得到的类别分数相乘，得到最终的分数\n\n$\\longrightarrow$HSJT：HSJT 首先利用目标类别之间的关系,建立新的层次网络模型,进一步提高识别性能;其次将边界框级标记图像和图像级标记图像结合起来进行联合训练 ,提出一种联合训练生成大规模半监督目标检测的方法 。\n\n### 轻量化模型\n\n$\\longrightarrow$MobileNet-v1：将传统卷积分为深度可分离卷积（即一个卷积核只负责对一个特征图进行卷积）+逐点卷积（1×1卷积）\n\n$~\\longrightarrow$MobileNet-v2：增加了Linear bottlenecks，去除小维度输出层后的非线性激活层，增加了inverted residual block，对维度先扩增再缩减。\n\n$~~\\longrightarrow$MobileNet-v3：加入互补搜索技术组合（通过NAS进行架构设计），进行网络结构改进\n\n$\\longrightarrow$ShuffleNetv1：\n\n$~\\longrightarrow$ShuffleNetc2:\n\n\n\nILSVRC = ImageNet Large Scale Visual Recognition Challenge","slug":"Object-Detection","published":1,"updated":"2021-03-07T02:11:12.414Z","_id":"cklxucsui000398xl31dtavm4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"改进主流网络\">改进主流网络</h3>\r\n<h4 id=\"two-stage\">Two-stage</h4>\r\n<p>R-CNN：Selective Search</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> Fast R-CNN： 将所有候选区域都送入CNN转为特征图的步骤改为直接将原图传入CNN后，在得到的特征图上寻找候选框对应的区域</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> Faster R-CNN: 增加了RPN，用来替代原先的候选框搜索</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> RFCN：Faster R-CNN中的ROI，用来从不同尺寸的特征图得到统一输出尺寸，由于ROI后的网络不具有平移不变性，且ROI后的层数会影响检测效率，改进的RFCN使用位置敏感得分图来代替感兴趣判断子网络（ROI和感兴趣判断子网络有区别吗？），并利用位置敏感的ROI池化层，直接对池化后结果进行判别。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> Mask R-CNN： 在Faster R-CNN中池化的时候都进行了取整操作，会影响语义分割等像素级别任务的精度，Mask R-CNN使用双线性插值填补非整数位置像素。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> 后处理的改进： NMS/Soft-NMS/Softer-NMS</p>\r\n<a id=\"more\"></a>\r\n<h4 id=\"one-stage\">One-stage</h4>\r\n<p>YOLO-v1</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> SSD：在后几层卷积上对不同尺度上的特征图运用anchor方法进行候选框提取</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> YOLO-v2：增加了批归一化，高分辨率分类器，直接目标框位置检测，多尺度训练</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> YOLO-v3：改进了backbone（v3中的池化基本由卷积实现，引入残差块），结合特征金字塔网络FPN</p>\r\n<h4 id=\"one-stage-two-stage\">One-stage + Two-stage</h4>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> RON：将SSD与Faster R-CNN相结合，改进backbone使用了与RPN相似的策略来引导目标对象搜索</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> RefineDet：融合了RPN，FPN，SSD，（比较复杂，看不懂）</p>\r\n<h3 id=\"小目标检测\">小目标检测</h3>\r\n<h4 id=\"backbone改进\">backbone改进</h4>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> DetNet：基于RestNet-50改进</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> DenseNet：使用了密集块进行层与层的连接</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> STDN：将DenseNet作为特征提取网络，引入尺寸转换层</p>\r\n<h4 id=\"增加感受野\">增加感受野</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> RFB：在Inception的基础上加入膨胀卷积/空洞卷积，增大感受野</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> TridenNet：以ResNet-101作为backbone，加入空洞卷积，通过多分支结构，权重共享和指定尺度过滤训练</p>\r\n<h4 id=\"特征融合\">特征融合</h4>\r\n<p>FPN</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>FPN+RPN</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>DES：提高低层特征图语义信息与高层特征语义信息</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>NAS-FPN：由于FPN是人为设计的，因此可使用强化学习在一个包含所有跨尺度连接的可拓展搜索空间中 选择最优的特征金字塔架构</p>\r\n<h4 id=\"级联卷积神经网络\">级联卷积神经网络</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Faster R-CNN：将两个RPN进行级联优化</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Intertive BBox：在检测阶段（应该就是推理阶段）使用级联的网络架构，将前一个检测模型回归得到的边界框初始化为下一个检测模型的边界框，迭代三次</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Integral loss：针对迭代式边界框回归（如Intertive BBox）单一IOU阈值的问题，将Intertive BBox的三次迭代改为三条支路，每条支路使用不同的IOU阈值</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> Cascade R-CNN：该模型基于前一阶段的输出进行训练，与Intertive BBox相比应该就是Intertive BBox在推理时的结构与其一致，Integral Loss使用的是不同重叠度阈值训练得到的。同时Cascade R-CNN也包含了不同IOU阈值的回归网络，用来提高IOU阈值下的正样本比例。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>HRNet：使用高分辨率的子网络作为第一阶段，然后逐渐并行添加较低分辨率的子网络，得到多个阶段的子网络的输出，之后输出又可以重新传到第一阶段的高分辨率特征图，与其进行融合。</p>\r\n<h4 id=\"模型训练方式\">模型训练方式</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>YOLO-v2：YOLO-v2的输入是416×416，而backbone在ImageNet的预训练模型使用的是224×224,v2就先在416×416的ImageNet上预训练了网络。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>SNIP：图像金子塔的尺寸归一化，使用图像金字塔来处理不同尺寸的数据，bp时只将与预训练模型所基于的训练数据尺寸相对应的ROI的梯度进行回传。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>perceptual GAN：将所有的物体分为大物体和小物体两个子集,通过挖掘不同尺度物体间的结构关联，perceptual GAN 包含两个子网络: 生成网络( 小物体) 和判别网络 ( 大物体) 。生成网络使用深度残差特征生成模型,通过引入低层细粒度的特征将原始较差的特征转换为高分辨的特征; 判别网络包含两个分支:对抗分支和感知分支,对抗分支用来分辨小物体生成的高分辨率特征与真实的大物体特征,感知分支则通过感知损失提升检测率 。</p>\r\n<h3 id=\"多类别物体检测\">多类别物体检测</h3>\r\n<h4 id=\"训练方式优化\">训练方式优化</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>LSDA：LSDA 首先利用分类数据集初始化神经网络,然后再利用检测数据集进行微调,最后将检测数据集训练的参数迁移到没有检测标签的类别上来实现提高目标检测类别数目</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>YOLO9000：使用联合训练策略通过使用标记为检测的图像来学习边界框的坐标预测和目标类别的特定信息 ,将检 测和分类数据集混合用于模型训练。 当网络看到标记为检测的图像时,能够基于完整的 YOLOv2 损失函数进行反向传播;当看到一个分类的图像时,只能够从该架构的分类特定部分反向传播损失 。还使用了WordNet（看不懂）。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>软采样：将ROI 的梯度重设为与正实例重叠的函数,确保不确定的背景区域相对于难样本 ( hard negative) 的权重更小</p>\r\n<h4 id=\"网络结构改进\">网络结构改进</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>R-FCN-3000：R-FCN中的位置敏感得分对于多类别情况下计算量会急剧增加，因此提出R-FCN-3000，该网络分为两条支路，一条与R-FCN类似，进行大类别检测，另一条用来进行细粒度分类（所有类别），最终将两条支路得到的类别分数相乘，得到最终的分数</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>HSJT：HSJT 首先利用目标类别之间的关系,建立新的层次网络模型,进一步提高识别性能;其次将边界框级标记图像和图像级标记图像结合起来进行联合训练 ,提出一种联合训练生成大规模半监督目标检测的方法 。</p>\r\n<h3 id=\"轻量化模型\">轻量化模型</h3>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>MobileNet-v1：将传统卷积分为深度可分离卷积（即一个卷积核只负责对一个特征图进行卷积）+逐点卷积（1×1卷积）</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span>MobileNet-v2：增加了Linear bottlenecks，去除小维度输出层后的非线性激活层，增加了inverted residual block，对维度先扩增再缩减。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span>MobileNet-v3：加入互补搜索技术组合（通过NAS进行架构设计），进行网络结构改进</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>ShuffleNetv1：</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span>ShuffleNetc2:</p>\r\n<p>ILSVRC = ImageNet Large Scale Visual Recognition Challenge</p>\r\n","site":{"data":{}},"excerpt":"<h3 id=\"改进主流网络\">改进主流网络</h3>\r\n<h4 id=\"two-stage\">Two-stage</h4>\r\n<p>R-CNN：Selective Search</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> Fast R-CNN： 将所有候选区域都送入CNN转为特征图的步骤改为直接将原图传入CNN后，在得到的特征图上寻找候选框对应的区域</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> Faster R-CNN: 增加了RPN，用来替代原先的候选框搜索</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> RFCN：Faster R-CNN中的ROI，用来从不同尺寸的特征图得到统一输出尺寸，由于ROI后的网络不具有平移不变性，且ROI后的层数会影响检测效率，改进的RFCN使用位置敏感得分图来代替感兴趣判断子网络（ROI和感兴趣判断子网络有区别吗？），并利用位置敏感的ROI池化层，直接对池化后结果进行判别。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> Mask R-CNN： 在Faster R-CNN中池化的时候都进行了取整操作，会影响语义分割等像素级别任务的精度，Mask R-CNN使用双线性插值填补非整数位置像素。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> 后处理的改进： NMS/Soft-NMS/Softer-NMS</p>","more":"<h4 id=\"one-stage\">One-stage</h4>\r\n<p>YOLO-v1</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> SSD：在后几层卷积上对不同尺度上的特征图运用anchor方法进行候选框提取</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> YOLO-v2：增加了批归一化，高分辨率分类器，直接目标框位置检测，多尺度训练</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> YOLO-v3：改进了backbone（v3中的池化基本由卷积实现，引入残差块），结合特征金字塔网络FPN</p>\r\n<h4 id=\"one-stage-two-stage\">One-stage + Two-stage</h4>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> RON：将SSD与Faster R-CNN相结合，改进backbone使用了与RPN相似的策略来引导目标对象搜索</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> RefineDet：融合了RPN，FPN，SSD，（比较复杂，看不懂）</p>\r\n<h3 id=\"小目标检测\">小目标检测</h3>\r\n<h4 id=\"backbone改进\">backbone改进</h4>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> DetNet：基于RestNet-50改进</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span> DenseNet：使用了密集块进行层与层的连接</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span> STDN：将DenseNet作为特征提取网络，引入尺寸转换层</p>\r\n<h4 id=\"增加感受野\">增加感受野</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> RFB：在Inception的基础上加入膨胀卷积/空洞卷积，增大感受野</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> TridenNet：以ResNet-101作为backbone，加入空洞卷积，通过多分支结构，权重共享和指定尺度过滤训练</p>\r\n<h4 id=\"特征融合\">特征融合</h4>\r\n<p>FPN</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>FPN+RPN</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>DES：提高低层特征图语义信息与高层特征语义信息</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>NAS-FPN：由于FPN是人为设计的，因此可使用强化学习在一个包含所有跨尺度连接的可拓展搜索空间中 选择最优的特征金字塔架构</p>\r\n<h4 id=\"级联卷积神经网络\">级联卷积神经网络</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Faster R-CNN：将两个RPN进行级联优化</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Intertive BBox：在检测阶段（应该就是推理阶段）使用级联的网络架构，将前一个检测模型回归得到的边界框初始化为下一个检测模型的边界框，迭代三次</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>Integral loss：针对迭代式边界框回归（如Intertive BBox）单一IOU阈值的问题，将Intertive BBox的三次迭代改为三条支路，每条支路使用不同的IOU阈值</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span> Cascade R-CNN：该模型基于前一阶段的输出进行训练，与Intertive BBox相比应该就是Intertive BBox在推理时的结构与其一致，Integral Loss使用的是不同重叠度阈值训练得到的。同时Cascade R-CNN也包含了不同IOU阈值的回归网络，用来提高IOU阈值下的正样本比例。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>HRNet：使用高分辨率的子网络作为第一阶段，然后逐渐并行添加较低分辨率的子网络，得到多个阶段的子网络的输出，之后输出又可以重新传到第一阶段的高分辨率特征图，与其进行融合。</p>\r\n<h4 id=\"模型训练方式\">模型训练方式</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>YOLO-v2：YOLO-v2的输入是416×416，而backbone在ImageNet的预训练模型使用的是224×224,v2就先在416×416的ImageNet上预训练了网络。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>SNIP：图像金子塔的尺寸归一化，使用图像金字塔来处理不同尺寸的数据，bp时只将与预训练模型所基于的训练数据尺寸相对应的ROI的梯度进行回传。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>perceptual GAN：将所有的物体分为大物体和小物体两个子集,通过挖掘不同尺度物体间的结构关联，perceptual GAN 包含两个子网络: 生成网络( 小物体) 和判别网络 ( 大物体) 。生成网络使用深度残差特征生成模型,通过引入低层细粒度的特征将原始较差的特征转换为高分辨的特征; 判别网络包含两个分支:对抗分支和感知分支,对抗分支用来分辨小物体生成的高分辨率特征与真实的大物体特征,感知分支则通过感知损失提升检测率 。</p>\r\n<h3 id=\"多类别物体检测\">多类别物体检测</h3>\r\n<h4 id=\"训练方式优化\">训练方式优化</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>LSDA：LSDA 首先利用分类数据集初始化神经网络,然后再利用检测数据集进行微调,最后将检测数据集训练的参数迁移到没有检测标签的类别上来实现提高目标检测类别数目</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>YOLO9000：使用联合训练策略通过使用标记为检测的图像来学习边界框的坐标预测和目标类别的特定信息 ,将检 测和分类数据集混合用于模型训练。 当网络看到标记为检测的图像时,能够基于完整的 YOLOv2 损失函数进行反向传播;当看到一个分类的图像时,只能够从该架构的分类特定部分反向传播损失 。还使用了WordNet（看不懂）。</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>软采样：将ROI 的梯度重设为与正实例重叠的函数,确保不确定的背景区域相对于难样本 ( hard negative) 的权重更小</p>\r\n<h4 id=\"网络结构改进\">网络结构改进</h4>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>R-FCN-3000：R-FCN中的位置敏感得分对于多类别情况下计算量会急剧增加，因此提出R-FCN-3000，该网络分为两条支路，一条与R-FCN类似，进行大类别检测，另一条用来进行细粒度分类（所有类别），最终将两条支路得到的类别分数相乘，得到最终的分数</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>HSJT：HSJT 首先利用目标类别之间的关系,建立新的层次网络模型,进一步提高识别性能;其次将边界框级标记图像和图像级标记图像结合起来进行联合训练 ,提出一种联合训练生成大规模半监督目标检测的方法 。</p>\r\n<h3 id=\"轻量化模型\">轻量化模型</h3>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>MobileNet-v1：将传统卷积分为深度可分离卷积（即一个卷积核只负责对一个特征图进行卷积）+逐点卷积（1×1卷积）</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span>MobileNet-v2：增加了Linear bottlenecks，去除小维度输出层后的非线性激活层，增加了inverted residual block，对维度先扩增再缩减。</p>\r\n<p><span class=\"math inline\">\\(~~\\longrightarrow\\)</span>MobileNet-v3：加入互补搜索技术组合（通过NAS进行架构设计），进行网络结构改进</p>\r\n<p><span class=\"math inline\">\\(\\longrightarrow\\)</span>ShuffleNetv1：</p>\r\n<p><span class=\"math inline\">\\(~\\longrightarrow\\)</span>ShuffleNetc2:</p>\r\n<p>ILSVRC = ImageNet Large Scale Visual Recognition Challenge</p>"},{"title":"Surface-go","date":"2021-03-06T13:07:45.000Z","_content":"\n\nThis is a test on my new surface go for testing my page transfer.\n","source":"_posts/Surface-go.md","raw":"---\ntitle: Surface-go\ndate: 2021-03-06 21:07:45\ntags: life\n---\n\n\nThis is a test on my new surface go for testing my page transfer.\n","slug":"Surface-go","published":1,"updated":"2021-03-07T02:18:09.837Z","_id":"cklxucsux000898xl2di6120c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This is a test on my new surface go for testing my page transfer.</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>This is a test on my new surface go for testing my page transfer.</p>\r\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cklxucsua000198xlhffxg3ny","category_id":"cklxucsun000498xlgeqt7sp5","_id":"cklxucsv5000c98xlgosoei3i"},{"post_id":"cklxucsui000398xl31dtavm4","category_id":"cklxucsv2000998xl3z7rcwvo","_id":"cklxucsv6000e98xl9pdwfnar"}],"PostTag":[{"post_id":"cklxucsua000198xlhffxg3ny","tag_id":"cklxucsuq000598xlbam3b7as","_id":"cklxucsv4000b98xlfgywex2i"},{"post_id":"cklxucsui000398xl31dtavm4","tag_id":"cklxucsv3000a98xlf6daflk9","_id":"cklxucsv8000h98xl7qe59xzy"},{"post_id":"cklxucsui000398xl31dtavm4","tag_id":"cklxucsv5000d98xlg19l9o8k","_id":"cklxucsv9000i98xlg9zfgbhp"},{"post_id":"cklxucsui000398xl31dtavm4","tag_id":"cklxucsv6000f98xla8yzfawm","_id":"cklxucsva000k98xlefz47m1k"},{"post_id":"cklxucsux000898xl2di6120c","tag_id":"cklyj03vc0000i0xl91tub5pg","_id":"cklyj03vl0001i0xla15x7muj"}],"Tag":[{"name":"c/c++","_id":"cklxucsuq000598xlbam3b7as"},{"name":"ml","_id":"cklxucsv3000a98xlf6daflk9"},{"name":"dl","_id":"cklxucsv5000d98xlg19l9o8k"},{"name":"object-detection","_id":"cklxucsv6000f98xla8yzfawm"},{"name":"x","_id":"cklxucsv7000g98xl5nzxe9a9"},{"name":"��","_id":"cklxucsv9000j98xl530y6pd9"},{"name":"life","_id":"cklyj03vc0000i0xl91tub5pg"}]}}